name: Build and Release Go Binaries


permissions:
  contents: write
  packages: write
  deployments: write

on:
  push:
    tags:
      - '*'

env:
  APP_NAME: swissgerman-transcriber

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [windows, darwin]
        goarch: [amd64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - name: Build binary
        run: |
          if [ "${{ matrix.goos }}" == "windows" ]; then
            GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o ${{ env.APP_NAME }}-${{ matrix.goos }}.exe
          else
            GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o ${{ env.APP_NAME }}-${{ matrix.goos }}
          fi

      - name: Upload binaries for Windows
        if: matrix.goos == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-windows.exe
          path: ${{ env.APP_NAME }}-windows.exe

      - name: Upload binaries for macOS
        if: matrix.goos == 'darwin'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-darwin
          path: ${{ env.APP_NAME }}-darwin

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Extract tag name
        id: extract_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download windows binary
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-windows.exe
          path: ./dist
      - name: Download macOS binary
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-darwin
          path: ./dist
      
      - name: Make macOS binary executable
        run: chmod +x ./dist/${{ env.APP_NAME }}-darwin

      - name: Add config.env file
        run: |
          cp config.env ./dist
          chmod +r ./dist/config.env

      - name: Create empty data folders
        run: |
          mkdir -p ./dist/data/audio ./dist/data/output ./dist/data/transcription
  
      - name: Create zip files for release
        run: |
          cd dist
          zip -r ${{ env.APP_NAME }}-windows.zip ${{ env.APP_NAME }}-windows.exe config.env data/audio data/output data/transcription
          zip -r ${{ env.APP_NAME }}-macOS.zip ${{ env.APP_NAME }}-darwin config.env data/audio data/output data/transcription
  

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          make_latest: true
          draft: false
          prerelease: false
          files: |
            ./dist/${{ env.APP_NAME }}-windows.zip
            ./dist/${{ env.APP_NAME }}-macOS.zip
